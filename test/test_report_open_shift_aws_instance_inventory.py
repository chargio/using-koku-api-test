# coding: utf-8

"""
    Cost Management

    The API for Cost Management.  You can find out more about     Cost Management at [https://github.com/project-koku/](https://github.com/project-koku/).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.report_open_shift_aws_instance_inventory import ReportOpenShiftAWSInstanceInventory  # noqa: E501
from openapi_client.rest import ApiException

class TestReportOpenShiftAWSInstanceInventory(unittest.TestCase):
    """ReportOpenShiftAWSInstanceInventory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ReportOpenShiftAWSInstanceInventory
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.report_open_shift_aws_instance_inventory.ReportOpenShiftAWSInstanceInventory()  # noqa: E501
        if include_optional :
            return ReportOpenShiftAWSInstanceInventory(
                meta = openapi_client.models.report_pagination_meta.ReportPaginationMeta(
                    count = 30, 
                    delta = {"delta":"cost"}, 
                    group_by = null, 
                    order_by = null, 
                    filter = null, 
                    units = '0', ), 
                links = openapi_client.models.pagination_links.PaginationLinks(
                    first = '/cost-management/v1/(resources)/?offset=0', 
                    previous = '/cost-management/v1/(resources)/?offset=20', 
                    next = '/cost-management/v1/(resources)/?offset=40', 
                    last = '/cost-management/v1/(resources)/?offset=100', ), 
                group_by = {"account":["*"]}, 
                order_by = {"cost":"asc"}, 
                filter = openapi_client.models.report_open_shift_aws_filter.ReportOpenShiftAWSFilter(
                    limit = 5, 
                    offset = 5, 
                    resolution = 'daily', 
                    time_scope_value = -10, 
                    time_scope_units = 'day', 
                    resource_scope = [], 
                    account = [
                        '0'
                        ], 
                    service = [
                        '0'
                        ], 
                    region = [
                        '0'
                        ], 
                    az = [
                        '0'
                        ], 
                    tag = [
                        '0'
                        ], 
                    project = [
                        '0'
                        ], 
                    cluster = [
                        '0'
                        ], 
                    node = [
                        '0'
                        ], ), 
                data = [
                    [{"date":"2019-01","accounts":[{"account":"9999999999999","values":[{"date":"2019-01","account":"9999999999999","account_alias":"9999999999999","infrastructure_cost":{"value":24,"units":"USD"},"derived_cost":{"value":0,"units":"USD"},"cost":{"value":24,"units":"USD"},"usage":{"value":24,"units":"Hrs"},"count":{"value":1,"units":"instances"}}]}]}]
                    ]
            )
        else :
            return ReportOpenShiftAWSInstanceInventory(
                data = [
                    [{"date":"2019-01","accounts":[{"account":"9999999999999","values":[{"date":"2019-01","account":"9999999999999","account_alias":"9999999999999","infrastructure_cost":{"value":24,"units":"USD"},"derived_cost":{"value":0,"units":"USD"},"cost":{"value":24,"units":"USD"},"usage":{"value":24,"units":"Hrs"},"count":{"value":1,"units":"instances"}}]}]}]
                    ],
        )

    def testReportOpenShiftAWSInstanceInventory(self):
        """Test ReportOpenShiftAWSInstanceInventory"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
