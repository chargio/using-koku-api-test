# coding: utf-8

"""
    Cost Management

    The API for Cost Management.  You can find out more about     Cost Management at [https://github.com/project-koku/](https://github.com/project-koku/).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TagsFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resolution': 'ReportResolution',
        'time_scope_value': 'ReportTimeScopeValue',
        'time_scope_units': 'ReportTimeScopeUnits'
    }

    attribute_map = {
        'resolution': 'resolution',
        'time_scope_value': 'time_scope_value',
        'time_scope_units': 'time_scope_units'
    }

    def __init__(self, resolution=None, time_scope_value=None, time_scope_units=None, local_vars_configuration=None):  # noqa: E501
        """TagsFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resolution = None
        self._time_scope_value = None
        self._time_scope_units = None
        self.discriminator = None

        if resolution is not None:
            self.resolution = resolution
        if time_scope_value is not None:
            self.time_scope_value = time_scope_value
        if time_scope_units is not None:
            self.time_scope_units = time_scope_units

    @property
    def resolution(self):
        """Gets the resolution of this TagsFilter.  # noqa: E501


        :return: The resolution of this TagsFilter.  # noqa: E501
        :rtype: ReportResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this TagsFilter.


        :param resolution: The resolution of this TagsFilter.  # noqa: E501
        :type: ReportResolution
        """

        self._resolution = resolution

    @property
    def time_scope_value(self):
        """Gets the time_scope_value of this TagsFilter.  # noqa: E501


        :return: The time_scope_value of this TagsFilter.  # noqa: E501
        :rtype: ReportTimeScopeValue
        """
        return self._time_scope_value

    @time_scope_value.setter
    def time_scope_value(self, time_scope_value):
        """Sets the time_scope_value of this TagsFilter.


        :param time_scope_value: The time_scope_value of this TagsFilter.  # noqa: E501
        :type: ReportTimeScopeValue
        """

        self._time_scope_value = time_scope_value

    @property
    def time_scope_units(self):
        """Gets the time_scope_units of this TagsFilter.  # noqa: E501


        :return: The time_scope_units of this TagsFilter.  # noqa: E501
        :rtype: ReportTimeScopeUnits
        """
        return self._time_scope_units

    @time_scope_units.setter
    def time_scope_units(self, time_scope_units):
        """Sets the time_scope_units of this TagsFilter.


        :param time_scope_units: The time_scope_units of this TagsFilter.  # noqa: E501
        :type: ReportTimeScopeUnits
        """

        self._time_scope_units = time_scope_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagsFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagsFilter):
            return True

        return self.to_dict() != other.to_dict()
